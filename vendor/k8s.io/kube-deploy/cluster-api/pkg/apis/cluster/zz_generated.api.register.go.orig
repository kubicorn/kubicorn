/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package cluster

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
	clustercommon "k8s.io/kube-deploy/cluster-api/pkg/apis/cluster/common"
)

var (
	InternalCluster = builders.NewInternalResource(
		"clusters",
		func() runtime.Object { return &Cluster{} },
		func() runtime.Object { return &ClusterList{} },
	)
	InternalClusterStatus = builders.NewInternalResourceStatus(
		"clusters",
		func() runtime.Object { return &Cluster{} },
		func() runtime.Object { return &ClusterList{} },
	)
	InternalMachine = builders.NewInternalResource(
		"machines",
		func() runtime.Object { return &Machine{} },
		func() runtime.Object { return &MachineList{} },
	)
	InternalMachineStatus = builders.NewInternalResourceStatus(
		"machines",
		func() runtime.Object { return &Machine{} },
		func() runtime.Object { return &MachineList{} },
	)
	InternalMachineSet = builders.NewInternalResource(
		"machinesets",
		func() runtime.Object { return &MachineSet{} },
		func() runtime.Object { return &MachineSetList{} },
	)
	InternalMachineSetStatus = builders.NewInternalResourceStatus(
		"machinesets",
		func() runtime.Object { return &MachineSet{} },
		func() runtime.Object { return &MachineSetList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("cluster.k8s.io").WithKinds(
		InternalCluster,
		InternalClusterStatus,
		InternalMachine,
		InternalMachineStatus,
		InternalMachineSet,
		InternalMachineSetStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type MachineSet struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   MachineSetSpec
	Status MachineSetStatus
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Machine struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   MachineSpec
	Status MachineStatus
}

type MachineSetStatus struct {
}

type MachineStatus struct {
	NodeRef      *corev1.ObjectReference
	LastUpdated  metav1.Time
	Versions     *MachineVersionInfo
	ErrorReason  *clustercommon.MachineStatusError
	ErrorMessage *string
}

type APIEndpoint struct {
	Host string
	Port int
}

type MachineVersionInfo struct {
	Kubelet          string
	ControlPlane     string
	ContainerRuntime ContainerRuntimeInfo
}

type MachineSpec struct {
	metav1.ObjectMeta
	Taints         []corev1.Taint
	ProviderConfig string
	Roles          []clustercommon.MachineRole
	Versions       MachineVersionInfo
	ConfigSource   *corev1.NodeConfigSource
}

type ContainerRuntimeInfo struct {
	Name    string
	Version string
}

type ClusterSpec struct {
	ClusterNetwork ClusterNetworkingConfig
	ProviderConfig string
}

type ClusterNetworkingConfig struct {
	Services  NetworkRanges
	Pods      NetworkRanges
	DNSDomain string
}

type MachineSetSpec struct {
}

type MachineVersionInfo struct {
	Kubelet          string
	ControlPlane     string
	ContainerRuntime ContainerRuntimeInfo
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Cluster struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   ClusterSpec
	Status ClusterStatus
}

type ContainerRuntimeInfo struct {
	Name    string
	Version string
}

type ClusterStatus struct {
	APIEndpoints   []APIEndpoint
	ErrorReason    clustercommon.ClusterStatusError
	ErrorMessage   string
	ProviderStatus string
}

type ClusterSpec struct {
	ClusterNetwork ClusterNetworkingConfig
	ProviderConfig string
}

type APIEndpoint struct {
	Host string
	Port int
}

type ClusterNetworkingConfig struct {
	Services  NetworkRanges
	Pods      NetworkRanges
	DNSDomain string
}

type NetworkRanges struct {
	CIDRBlocks []string
}

//
// Cluster Functions and Structs
//
// +k8s:deepcopy-gen=false
type ClusterStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type ClusterStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type ClusterList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Cluster
}

func (Cluster) NewStatus() interface{} {
	return ClusterStatus{}
}

func (pc *Cluster) GetStatus() interface{} {
	return pc.Status
}

func (pc *Cluster) SetStatus(s interface{}) {
	pc.Status = s.(ClusterStatus)
}

func (pc *Cluster) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Cluster) SetSpec(s interface{}) {
	pc.Spec = s.(ClusterSpec)
}

func (pc *Cluster) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Cluster) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Cluster) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Cluster.
// +k8s:deepcopy-gen=false
type ClusterRegistry interface {
	ListClusters(ctx request.Context, options *internalversion.ListOptions) (*ClusterList, error)
	GetCluster(ctx request.Context, id string, options *metav1.GetOptions) (*Cluster, error)
	CreateCluster(ctx request.Context, id *Cluster) (*Cluster, error)
	UpdateCluster(ctx request.Context, id *Cluster) (*Cluster, error)
	DeleteCluster(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewClusterRegistry(sp builders.StandardStorageProvider) ClusterRegistry {
	return &storageCluster{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageCluster struct {
	builders.StandardStorageProvider
}

func (s *storageCluster) ListClusters(ctx request.Context, options *internalversion.ListOptions) (*ClusterList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*ClusterList), err
}

func (s *storageCluster) GetCluster(ctx request.Context, id string, options *metav1.GetOptions) (*Cluster, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Cluster), nil
}

func (s *storageCluster) CreateCluster(ctx request.Context, object *Cluster) (*Cluster, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, false)
	if err != nil {
		return nil, err
	}
	return obj.(*Cluster), nil
}

func (s *storageCluster) UpdateCluster(ctx request.Context, object *Cluster) (*Cluster, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object, builders.Scheme))
	if err != nil {
		return nil, err
	}
	return obj.(*Cluster), nil
}

func (s *storageCluster) DeleteCluster(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// Machine Functions and Structs
//
// +k8s:deepcopy-gen=false
type MachineStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type MachineStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type MachineList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Machine
}

func (Machine) NewStatus() interface{} {
	return MachineStatus{}
}

func (pc *Machine) GetStatus() interface{} {
	return pc.Status
}

func (pc *Machine) SetStatus(s interface{}) {
	pc.Status = s.(MachineStatus)
}

func (pc *Machine) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Machine) SetSpec(s interface{}) {
	pc.Spec = s.(MachineSpec)
}

func (pc *Machine) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Machine) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Machine) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Machine.
// +k8s:deepcopy-gen=false
type MachineRegistry interface {
	ListMachines(ctx request.Context, options *internalversion.ListOptions) (*MachineList, error)
	GetMachine(ctx request.Context, id string, options *metav1.GetOptions) (*Machine, error)
	CreateMachine(ctx request.Context, id *Machine) (*Machine, error)
	UpdateMachine(ctx request.Context, id *Machine) (*Machine, error)
	DeleteMachine(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewMachineRegistry(sp builders.StandardStorageProvider) MachineRegistry {
	return &storageMachine{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageMachine struct {
	builders.StandardStorageProvider
}

func (s *storageMachine) ListMachines(ctx request.Context, options *internalversion.ListOptions) (*MachineList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*MachineList), err
}

func (s *storageMachine) GetMachine(ctx request.Context, id string, options *metav1.GetOptions) (*Machine, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Machine), nil
}

func (s *storageMachine) CreateMachine(ctx request.Context, object *Machine) (*Machine, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, false)
	if err != nil {
		return nil, err
	}
	return obj.(*Machine), nil
}

func (s *storageMachine) UpdateMachine(ctx request.Context, object *Machine) (*Machine, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object, builders.Scheme))
	if err != nil {
		return nil, err
	}
	return obj.(*Machine), nil
}

func (s *storageMachine) DeleteMachine(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// MachineSet Functions and Structs
//
// +k8s:deepcopy-gen=false
type MachineSetStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type MachineSetStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type MachineSetList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []MachineSet
}

func (MachineSet) NewStatus() interface{} {
	return MachineSetStatus{}
}

func (pc *MachineSet) GetStatus() interface{} {
	return pc.Status
}

func (pc *MachineSet) SetStatus(s interface{}) {
	pc.Status = s.(MachineSetStatus)
}

func (pc *MachineSet) GetSpec() interface{} {
	return pc.Spec
}

func (pc *MachineSet) SetSpec(s interface{}) {
	pc.Spec = s.(MachineSetSpec)
}

func (pc *MachineSet) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *MachineSet) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc MachineSet) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store MachineSet.
// +k8s:deepcopy-gen=false
type MachineSetRegistry interface {
	ListMachineSets(ctx request.Context, options *internalversion.ListOptions) (*MachineSetList, error)
	GetMachineSet(ctx request.Context, id string, options *metav1.GetOptions) (*MachineSet, error)
	CreateMachineSet(ctx request.Context, id *MachineSet) (*MachineSet, error)
	UpdateMachineSet(ctx request.Context, id *MachineSet) (*MachineSet, error)
	DeleteMachineSet(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewMachineSetRegistry(sp builders.StandardStorageProvider) MachineSetRegistry {
	return &storageMachineSet{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageMachineSet struct {
	builders.StandardStorageProvider
}

func (s *storageMachineSet) ListMachineSets(ctx request.Context, options *internalversion.ListOptions) (*MachineSetList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*MachineSetList), err
}

func (s *storageMachineSet) GetMachineSet(ctx request.Context, id string, options *metav1.GetOptions) (*MachineSet, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*MachineSet), nil
}

func (s *storageMachineSet) CreateMachineSet(ctx request.Context, object *MachineSet) (*MachineSet, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, false)
	if err != nil {
		return nil, err
	}
	return obj.(*MachineSet), nil
}

func (s *storageMachineSet) UpdateMachineSet(ctx request.Context, object *MachineSet) (*MachineSet, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object, builders.Scheme))
	if err != nil {
		return nil, err
	}
	return obj.(*MachineSet), nil
}

func (s *storageMachineSet) DeleteMachineSet(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
