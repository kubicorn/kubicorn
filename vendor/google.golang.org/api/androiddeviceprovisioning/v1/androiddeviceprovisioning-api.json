{
  "batchPath": "batch",
  "documentationLink": "https://developers.google.com/zero-touch/",
  "revision": "20170729",
  "id": "androiddeviceprovisioning:v1",
  "title": "Android Device Provisioning Partner API",
  "discoveryVersion": "v1",
  "ownerName": "Google",
  "version_module": "True",
  "resources": {
    "partners": {
      "resources": {
        "customers": {
          "methods": {
            "list": {
              "id": "androiddeviceprovisioning.partners.customers.list",
              "path": "v1/partners/{+partnerId}/customers",
              "description": "List all the customers that has delegates some role to this customer.",
              "response": {
                "$ref": "ListCustomersResponse"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "GET",
              "parameters": {
                "partnerId": {
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "the id of the partner."
                }
              },
              "flatPath": "v1/partners/{partnersId}/customers"
            }
          }
        },
        "devices": {
          "methods": {
            "findByOwner": {
              "description": "Find devices by ownership.",
              "request": {
                "$ref": "FindDevicesByOwnerRequest"
              },
              "response": {
                "$ref": "FindDevicesByOwnerResponse"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "location": "path",
                  "description": "id of the partner.",
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:findByOwner",
              "id": "androiddeviceprovisioning.partners.devices.findByOwner",
              "path": "v1/partners/{+partnerId}/devices:findByOwner"
            },
            "claim": {
              "response": {
                "$ref": "ClaimDeviceResponse"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "format": "int64",
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Id of the partner.",
                  "pattern": "^[^/]+$"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:claim",
              "id": "androiddeviceprovisioning.partners.devices.claim",
              "path": "v1/partners/{+partnerId}/devices:claim",
              "request": {
                "$ref": "ClaimDeviceRequest"
              },
              "description": "Claim the device identified by device identifier."
            },
            "claimAsync": {
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "description": "partner id.",
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:claimAsync",
              "id": "androiddeviceprovisioning.partners.devices.claimAsync",
              "path": "v1/partners/{+partnerId}/devices:claimAsync",
              "request": {
                "$ref": "ClaimDevicesRequest"
              },
              "description": "Claim devices asynchronously"
            },
            "findByIdentifier": {
              "description": "Find devices by device identifier.",
              "request": {
                "$ref": "FindDevicesByDeviceIdentifierRequest"
              },
              "response": {
                "$ref": "FindDevicesByDeviceIdentifierResponse"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "format": "int64",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "id of the partner.",
                  "pattern": "^[^/]+$"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:findByIdentifier",
              "id": "androiddeviceprovisioning.partners.devices.findByIdentifier",
              "path": "v1/partners/{+partnerId}/devices:findByIdentifier"
            },
            "unclaimAsync": {
              "description": "Unclaim devices asynchronously",
              "request": {
                "$ref": "UnclaimDevicesRequest"
              },
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "description": "partner id.",
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:unclaimAsync",
              "id": "androiddeviceprovisioning.partners.devices.unclaimAsync",
              "path": "v1/partners/{+partnerId}/devices:unclaimAsync"
            },
            "metadata": {
              "response": {
                "$ref": "DeviceMetadata"
              },
              "parameterOrder": [
                "metadataOwnerId",
                "deviceId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "metadataOwnerId": {
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The owner of the newly set metadata. Should be partner id itself."
                },
                "deviceId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "id of the partner.",
                  "pattern": "^[^/]+$",
                  "format": "int64"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices/{devicesId}/metadata",
              "id": "androiddeviceprovisioning.partners.devices.metadata",
              "path": "v1/partners/{+metadataOwnerId}/devices/{+deviceId}/metadata",
              "description": "Update the metadata",
              "request": {
                "$ref": "UpdateDeviceMetadataRequest"
              }
            },
            "updateMetadataAsync": {
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "description": "partner id.",
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:updateMetadataAsync",
              "id": "androiddeviceprovisioning.partners.devices.updateMetadataAsync",
              "path": "v1/partners/{+partnerId}/devices:updateMetadataAsync",
              "description": "Set metadata in batch asynchronously.",
              "request": {
                "$ref": "UpdateDeviceMetadataInBatchRequest"
              }
            },
            "get": {
              "description": "Get a device",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Device"
              },
              "parameters": {
                "name": {
                  "description": "resource name in 'partners/[PARTNER_ID]/devices/[DEVICE_ID]'.",
                  "type": "string",
                  "required": true,
                  "pattern": "^partners/[^/]+/devices/[^/]+$",
                  "location": "path"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices/{devicesId}",
              "path": "v1/{+name}",
              "id": "androiddeviceprovisioning.partners.devices.get"
            },
            "unclaim": {
              "response": {
                "$ref": "Empty"
              },
              "parameterOrder": [
                "partnerId"
              ],
              "httpMethod": "POST",
              "parameters": {
                "partnerId": {
                  "location": "path",
                  "description": "Id of the partner.",
                  "pattern": "^[^/]+$",
                  "format": "int64",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "v1/partners/{partnersId}/devices:unclaim",
              "id": "androiddeviceprovisioning.partners.devices.unclaim",
              "path": "v1/partners/{+partnerId}/devices:unclaim",
              "description": "Unclaim the device identified by device_id or identifier.",
              "request": {
                "$ref": "UnclaimDeviceRequest"
              }
            }
          }
        }
      }
    },
    "operations": {
      "methods": {
        "get": {
          "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
          "httpMethod": "GET",
          "response": {
            "$ref": "Operation"
          },
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "pattern": "^operations/.+$",
              "location": "path",
              "description": "The name of the operation resource.",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "v1/operations/{operationsId}",
          "path": "v1/{+name}",
          "id": "androiddeviceprovisioning.operations.get"
        }
      }
    }
  },
  "parameters": {
    "pp": {
      "location": "query",
      "description": "Pretty-print response.",
      "default": "true",
      "type": "boolean"
    },
    "bearer_token": {
      "location": "query",
      "description": "OAuth bearer token.",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "$.xgafv": {
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "default": "json"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    }
  },
  "schemas": {
    "DevicesLongRunningOperationMetadata": {
      "description": "Long running operation metadata.",
      "type": "object",
      "properties": {
        "processingStatus": {
          "description": "The overall processing status.",
          "type": "string",
          "enumDescriptions": [
            "Invalid code. Shouldn't be used.",
            "Pending",
            "In progress",
            "Processed.\nThis doesn't mean all items were processed sucessfully, you should\ncheck the `response` field for the result of every item."
          ],
          "enum": [
            "BATCH_PROCESS_STATUS_UNSPECIFIED",
            "BATCH_PROCESS_PENDING",
            "BATCH_PROCESS_IN_PROGRESS",
            "BATCH_PROCESS_PROCESSED"
          ]
        },
        "progress": {
          "format": "int32",
          "description": "Processing progress from 0 to 100.",
          "type": "integer"
        },
        "devicesCount": {
          "format": "int32",
          "description": "Number of devices parsed in your requests.",
          "type": "integer"
        }
      },
      "id": "DevicesLongRunningOperationMetadata"
    },
    "ClaimDeviceRequest": {
      "id": "ClaimDeviceRequest",
      "description": "Request message to claim a device on behalf of a customer.",
      "type": "object",
      "properties": {
        "customerId": {
          "format": "int64",
          "description": "The customer to claim for.",
          "type": "string"
        },
        "deviceIdentifier": {
          "$ref": "DeviceIdentifier",
          "description": "The device identifier of the device to claim."
        },
        "sectionType": {
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ],
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "description": "Section to claim",
          "type": "string"
        }
      }
    },
    "UpdateDeviceMetadataInBatchRequest": {
      "type": "object",
      "properties": {
        "updates": {
          "description": "list of metadata updates.",
          "items": {
            "$ref": "UpdateMetadataArguments"
          },
          "type": "array"
        }
      },
      "id": "UpdateDeviceMetadataInBatchRequest",
      "description": "Request to update device metadata in batch."
    },
    "ClaimDeviceResponse": {
      "description": "Response message containing device id of the claim.",
      "type": "object",
      "properties": {
        "deviceName": {
          "description": "the resource name of the device in\n'partners/[PARTNER_ID]/devices/[DEVICE_ID]'.",
          "type": "string"
        },
        "deviceId": {
          "format": "int64",
          "description": "the device id of the claimed device.",
          "type": "string"
        }
      },
      "id": "ClaimDeviceResponse"
    },
    "ListCustomersResponse": {
      "type": "object",
      "properties": {
        "customers": {
          "description": "List of customers related to this partner.",
          "items": {
            "$ref": "Company"
          },
          "type": "array"
        }
      },
      "id": "ListCustomersResponse",
      "description": "Response message of all customers related to this partner."
    },
    "UpdateMetadataArguments": {
      "description": "Identifies metdata updates to one device.",
      "type": "object",
      "properties": {
        "deviceMetadata": {
          "description": "The metadata to update.",
          "$ref": "DeviceMetadata"
        },
        "deviceIdentifier": {
          "description": "device identifier.",
          "$ref": "DeviceIdentifier"
        },
        "deviceId": {
          "format": "int64",
          "description": "device id of the device.",
          "type": "string"
        }
      },
      "id": "UpdateMetadataArguments"
    },
    "Device": {
      "properties": {
        "deviceId": {
          "type": "string",
          "format": "int64",
          "description": "Device id"
        },
        "deviceMetadata": {
          "description": "Device metadata",
          "$ref": "DeviceMetadata"
        },
        "deviceIdentifier": {
          "$ref": "DeviceIdentifier",
          "description": "Device identifier"
        },
        "name": {
          "description": "Resource name in 'partners/[PARTNER_ID]/devices/[DEVICE_ID]'.",
          "type": "string"
        },
        "claims": {
          "description": "claims",
          "items": {
            "$ref": "DeviceClaim"
          },
          "type": "array"
        }
      },
      "id": "Device",
      "description": "Device",
      "type": "object"
    },
    "Company": {
      "description": "Company",
      "type": "object",
      "properties": {
        "companyName": {
          "description": "company name",
          "type": "string"
        },
        "companyId": {
          "format": "int64",
          "description": "company id",
          "type": "string"
        }
      },
      "id": "Company"
    },
    "UpdateDeviceMetadataRequest": {
      "description": "Request to set metadata for a device.",
      "type": "object",
      "properties": {
        "deviceMetadata": {
          "description": "The metdata to set.",
          "$ref": "DeviceMetadata"
        }
      },
      "id": "UpdateDeviceMetadataRequest"
    },
    "PartnerUnclaim": {
      "description": "Identifies one unclaim request.",
      "type": "object",
      "properties": {
        "deviceIdentifier": {
          "$ref": "DeviceIdentifier",
          "description": "device identifier of the device."
        },
        "sectionType": {
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "description": "section type to unclaim.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ]
        },
        "deviceId": {
          "format": "int64",
          "description": "device id of the device.",
          "type": "string"
        }
      },
      "id": "PartnerUnclaim"
    },
    "Empty": {
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object"
    },
    "FindDevicesByDeviceIdentifierResponse": {
      "description": "Response containing found devices.",
      "type": "object",
      "properties": {
        "devices": {
          "description": "Found devices.",
          "items": {
            "$ref": "Device"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Page token of next page",
          "type": "string"
        }
      },
      "id": "FindDevicesByDeviceIdentifierResponse"
    },
    "PartnerClaim": {
      "type": "object",
      "properties": {
        "deviceMetadata": {
          "$ref": "DeviceMetadata",
          "description": "metadata to set at claim."
        },
        "deviceIdentifier": {
          "$ref": "DeviceIdentifier",
          "description": "Device identifier of the device."
        },
        "sectionType": {
          "description": "section type to claim.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ],
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ]
        },
        "customerId": {
          "format": "int64",
          "description": "customer id to claim for.",
          "type": "string"
        }
      },
      "id": "PartnerClaim",
      "description": "Identifies one claim request."
    },
    "UnclaimDeviceRequest": {
      "description": "Request message to unclaim a device.",
      "type": "object",
      "properties": {
        "deviceIdentifier": {
          "$ref": "DeviceIdentifier",
          "description": "The device identifier you use when you claimed this device."
        },
        "sectionType": {
          "description": "The section type to unclaim for.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ],
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ]
        },
        "deviceId": {
          "format": "int64",
          "description": "The device id returned by ClaimDevice.",
          "type": "string"
        }
      },
      "id": "UnclaimDeviceRequest"
    },
    "DeviceMetadata": {
      "properties": {
        "entries": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata entries"
        }
      },
      "id": "DeviceMetadata",
      "description": "metadata",
      "type": "object"
    },
    "DevicesLongRunningOperationResponse": {
      "id": "DevicesLongRunningOperationResponse",
      "description": "Long running operation response.",
      "type": "object",
      "properties": {
        "successCount": {
          "format": "int32",
          "description": "Number of succeesfully processed ones.",
          "type": "integer"
        },
        "perDeviceStatus": {
          "description": "processing status for each device.\nOne PerDeviceStatus per device. The order is the same as in your requests.",
          "items": {
            "$ref": "OperationPerDevice"
          },
          "type": "array"
        }
      }
    },
    "DeviceClaim": {
      "description": "containing the necessary info about a claim for a partner.",
      "type": "object",
      "properties": {
        "sectionType": {
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ],
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "description": "section type.",
          "type": "string"
        },
        "ownerCompanyId": {
          "format": "int64",
          "description": "owner id",
          "type": "string"
        }
      },
      "id": "DeviceClaim"
    },
    "PerDeviceStatusInBatch": {
      "description": "Stores the processing result for each device.",
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enumDescriptions": [
            "Invalid code. Shouldn' be used.",
            "Unknown error.\nUnknown error is we don't expect it here.",
            "Other error.\nOther error is we know/expect this error, but not having proper error\ncode yet.",
            "Success.",
            "Permission denied",
            "Invalid device identifier.",
            "Invalid section type.",
            "This section is claimed by other company."
          ],
          "enum": [
            "SINGLE_DEVICE_STATUS_UNSPECIFIED",
            "SINGLE_DEVICE_STATUS_UNKNOWN_ERROR",
            "SINGLE_DEVICE_STATUS_OTHER_ERROR",
            "SINGLE_DEVICE_STATUS_SUCCESS",
            "SINGLE_DEVICE_STATUS_PERMISSION_DENIED",
            "SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER",
            "SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE",
            "SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS"
          ],
          "description": "Process result."
        },
        "errorIdentifier": {
          "description": "Error identifier.",
          "type": "string"
        },
        "errorMessage": {
          "description": "Error message",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "format": "int64",
          "description": "device id of the device if process succeeds."
        }
      },
      "id": "PerDeviceStatusInBatch"
    },
    "ClaimDevicesRequest": {
      "description": "Request to claim devices asynchronously in batch.",
      "type": "object",
      "properties": {
        "claims": {
          "description": "list of claims.",
          "items": {
            "$ref": "PartnerClaim"
          },
          "type": "array"
        }
      },
      "id": "ClaimDevicesRequest"
    },
    "FindDevicesByOwnerRequest": {
      "properties": {
        "limit": {
          "format": "int64",
          "description": "The number of devices to show in the result.",
          "type": "string"
        },
        "sectionType": {
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "description": "The section type.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified",
            "Zero touch"
          ]
        },
        "pageToken": {
          "type": "string",
          "description": "Page token"
        },
        "customerId": {
          "description": "List of customer ids to search for.",
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "FindDevicesByOwnerRequest",
      "description": "Request to find devices by customers.",
      "type": "object"
    },
    "DeviceIdentifier": {
      "description": "DeviceIdentifiers identifies an unique device.",
      "type": "object",
      "properties": {
        "model": {
          "description": "Model to match android.os.Build.MODEL (required).",
          "type": "string"
        },
        "imei": {
          "description": "IMEI (either IMEI or MEID is required).",
          "type": "string"
        },
        "manufacturer": {
          "description": "Manufacturer to match android.os.Build.MANUFACTURER (required).",
          "type": "string"
        },
        "meid": {
          "description": "MEID",
          "type": "string"
        },
        "serialNumber": {
          "description": "Serial number (optional)",
          "type": "string"
        }
      },
      "id": "DeviceIdentifier"
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "type": "object",
      "properties": {
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "This field will contain a `DevicesLongRunningOperationResponse` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should have the format of `operations/some/unique/name`.",
          "type": "string"
        },
        "error": {
          "$ref": "Status",
          "description": "This field will always be not set if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`. In this case, error information for each device is set in `response.perDeviceStatus.result.status`."
        },
        "metadata": {
          "description": "This field will contain a `DevicesLongRunningOperationMetadata` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf true, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        }
      },
      "id": "Operation"
    },
    "UnclaimDevicesRequest": {
      "type": "object",
      "properties": {
        "unclaims": {
          "description": "list of unclaims.",
          "items": {
            "$ref": "PartnerUnclaim"
          },
          "type": "array"
        }
      },
      "id": "UnclaimDevicesRequest",
      "description": "Request to unclaim devices asynchronously in batch."
    },
    "Status": {
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        },
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "type": "object"
    },
    "FindDevicesByDeviceIdentifierRequest": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "Number of devices to show."
        },
        "deviceIdentifier": {
          "$ref": "DeviceIdentifier",
          "description": "The device identifier to search"
        },
        "pageToken": {
          "description": "Page token",
          "type": "string"
        }
      },
      "id": "FindDevicesByDeviceIdentifierRequest",
      "description": "Request to find devices."
    },
    "OperationPerDevice": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "PerDeviceStatusInBatch",
          "description": "Processing result for every device."
        },
        "unclaim": {
          "$ref": "PartnerUnclaim",
          "description": "Request to unclaim a device."
        },
        "claim": {
          "description": "Request to claim a device.",
          "$ref": "PartnerClaim"
        },
        "updateMetadata": {
          "$ref": "UpdateMetadataArguments",
          "description": "Request to set metadata for a device."
        }
      },
      "id": "OperationPerDevice",
      "description": "Operation the server received for every device."
    },
    "FindDevicesByOwnerResponse": {
      "description": "Response containing found devices.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Page token of next page",
          "type": "string"
        },
        "devices": {
          "description": "Devices found.",
          "items": {
            "$ref": "Device"
          },
          "type": "array"
        }
      },
      "id": "FindDevicesByOwnerResponse"
    }
  },
  "protocol": "rest",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "version": "v1",
  "baseUrl": "https://androiddeviceprovisioning.googleapis.com/",
  "canonicalName": "Android Provisioning Partner",
  "servicePath": "",
  "description": "Android Device Provisioning Partner API",
  "kind": "discovery#restDescription",
  "rootUrl": "https://androiddeviceprovisioning.googleapis.com/",
  "basePath": "",
  "ownerDomain": "google.com",
  "name": "androiddeviceprovisioning"
}
