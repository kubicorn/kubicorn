// Copyright Â© 2017 The Kubicorn Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package resources

import (
	"fmt"

	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/kubicorn/kubicorn/apis/cluster"
	"github.com/kubicorn/kubicorn/cloud"
	"github.com/kubicorn/kubicorn/pkg/compare"
	"github.com/kubicorn/kubicorn/pkg/logger"
)

var _ cloud.Resource = &NATGateway{}

type NATGateway struct {
	Shared
}

func (r *NATGateway) Actual(immutable *cluster.Cluster) (*cluster.Cluster, cloud.Resource, error) {
	logger.Debug("natgateway.Actual")
	newResource := &NATGateway{
		Shared: Shared{
			Name: r.Name,
			Tags: make(map[string]string),
		},
	}
	if immutable.ProviderConfig().Network.NATGateway.Identifier != "" {
		input := &ec2.DescribeNatGatewaysInput{
			Filter: []*ec2.Filter{
				{
					Name:   S("tag:kubicorn-nat-gateway-name"),
					Values: []*string{S(r.Name)},
				},
			},
		}
		output, err := Sdk.Ec2.DescribeNatGateways(input)
		if err != nil {
			return nil, nil, err
		}
		lsn := len(output.NatGateways)
		if lsn != 0 {
			ig := output.NatGateways[0]
			for _, tag := range ig.Tags {
				key := *tag.Key
				val := *tag.Value
				newResource.Tags[key] = val
			}
			newResource.Identifier = *ig.NatGatewayId
		}
	}
	newCluster := r.immutableRender(newResource, immutable)
	return newCluster, newResource, nil
}

func (r *NATGateway) Expected(immutable *cluster.Cluster) (*cluster.Cluster, cloud.Resource, error) {
	logger.Debug("natgateway.Expected %v", r.Identifier)
	newResource := &NATGateway{
		Shared: Shared{
			Tags: map[string]string{
				"Name":                      r.Name,
				"KubernetesCluster":         immutable.Name,
				"kubicorn-nat-gateway-name": r.Name,
			},
			Identifier: immutable.ProviderConfig().Network.NATGateway.Identifier,
			Name:       r.Name,
		},
	}
	newCluster := r.immutableRender(newResource, immutable)
	return newCluster, newResource, nil
}

func (r *NATGateway) Apply(actual, expected cloud.Resource, immutable *cluster.Cluster) (*cluster.Cluster, cloud.Resource, error) {
	logger.Debug("natgateway.Apply")
	applyResource := expected.(*NATGateway)
	isEqual, err := compare.IsEqual(actual.(*NATGateway), expected.(*NATGateway))
	if err != nil {
		return nil, nil, err
	}
	if isEqual {
		return immutable, applyResource, nil
	}
	input := &ec2.CreateNatGatewayInput{
		AllocationId: "",
		SubnetId:     "",
	}
	output, err := Sdk.Ec2.CreateNatGateway(input)
	if err != nil {
		return nil, nil, err
	}
	logger.Success("Created NAT Gateway [%s]", *output.NatGateway.NatGatewayId)
	ig := output.NatGateway

	newResource := &NATGateway{
		Shared: Shared{
			Tags: make(map[string]string),
		},
	}
	newResource.Identifier = *ig.NatGatewayId
	newResource.Name = expected.(*NATGateway).Name
	for key, value := range expected.(*NATGateway).Tags {
		newResource.Tags[key] = value
	}
	expected.(*NATGateway).Identifier = *output.NatGateway.NatGatewayId
	err = expected.(*NATGateway).tag(expected.(*NATGateway).Tags)
	if err != nil {
		return nil, nil, err
	}

	newCluster := r.immutableRender(newResource, immutable)
	return newCluster, newResource, nil
}

func (r *NATGateway) Delete(actual cloud.Resource, immutable *cluster.Cluster) (*cluster.Cluster, cloud.Resource, error) {
	logger.Debug("natgateway.Delete")
	deleteResource := actual.(*NATGateway)
	if deleteResource.Identifier == "" {
		return nil, nil, fmt.Errorf("Unable to delete natgateway resource without ID [%s]", deleteResource.Name)
	}

	input := &ec2.DescribeNatGatewaysInput{
		Filter: []*ec2.Filter{
			{
				Name:   S("tag:kubicorn-nat-gateway-name"),
				Values: []*string{S(r.Name)},
			},
		},
	}
	output, err := Sdk.Ec2.DescribeNatGateways(input)
	if err != nil {
		return nil, nil, err
	}
	lsn := len(output.NatGateways)
	if lsn == 0 {
		return nil, nil, nil
	}
	if lsn != 1 {
		return nil, nil, fmt.Errorf("Found [%d] NAT Gateways for ID [%s]", lsn, r.Name)
	}
	ig := output.NatGateways[0]

	delinput := &ec2.DeleteNatGatewayInput{
		NatGatewayId: ig.NatGatewayId,
	}
	_, err = Sdk.Ec2.DeleteNatGateway(delinput)
	if err != nil {
		return nil, nil, err
	}
	logger.Success("Deleted natgateway [%s]", actual.(*NATGateway).Identifier)
	newResource := &NATGateway{}
	newResource.Name = actual.(*NATGateway).Name
	newResource.Tags = actual.(*NATGateway).Tags

	newCluster := r.immutableRender(newResource, immutable)
	return newCluster, newResource, nil
}

func (r *NATGateway) immutableRender(newResource cloud.Resource, inaccurateCluster *cluster.Cluster) *cluster.Cluster {
	logger.Debug("natgateway.Render")
	newCluster := inaccurateCluster
	providerConfig := newCluster.ProviderConfig()
	providerConfig.Network.NATGateway.Identifier = newResource.(*NATGateway).Identifier
	newCluster.SetProviderConfig(providerConfig)
	return newCluster
}

func (r *NATGateway) tag(tags map[string]string) error {
	logger.Debug("natgateway.Tag")
	tagInput := &ec2.CreateTagsInput{
		Resources: []*string{&r.Identifier},
	}
	for key, val := range tags {
		logger.Debug("Registering NAT Gateway tag [%s] %s", key, val)
		tagInput.Tags = append(tagInput.Tags, &ec2.Tag{
			Key:   S("%s", key),
			Value: S("%s", val),
		})
	}
	_, err := Sdk.Ec2.CreateTags(tagInput)
	if err != nil {
		return err
	}
	return nil
}
